name: Build Server and Push Docker image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        run: |
          docker version && docker login --username=${{ secrets.ALIYUN_DOCKER_USERNAME }} --password=${{ secrets.ALIYUN_DOCKER_PASSWORD }} ${{ secrets.ALIYUN_REGISTRY }}

      - name: Prepare repository name
        id: prep_repo_name
        run: echo "IMAGE_TAG=${{ secrets.ALIYUN_REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-server:${{ github.sha }}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.ALIYUN_PRIVATE_KEY }}

      - name: Prepare container name
        id: prep_container_name
        run: echo "CONTAINER_NAME=${{ github.repository_owner }}-${{ github.event.repository.name }}-server" >> $GITHUB_ENV

      - name: Connect and Run Docker Commands
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.ALIYUN_USERNAME }}@${{ secrets.ALIYUN_HOST }} << 'EOF'
            # 登录 Docker
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.ALIYUN_REGISTRY }}
          
            # 检查容器是否存在
            if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
              echo "Container exists, stopping and removing..."
              if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
                docker stop ${{ env.CONTAINER_NAME }}
              fi
              docker rm ${{ env.CONTAINER_NAME }}
            else
              echo "Container does not exist, no need to stop or remove."
            fi

            docker run --name ${{ env.CONTAINER_NAME }} -p 8082:8082 -v /tmp/log:/tmp/log -d ${{ env.IMAGE_TAG }}
          EOF
